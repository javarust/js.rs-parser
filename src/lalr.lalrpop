use std::str::FromStr;
use std::f64::NAN;
use jsrs_common::ast::{BinOp, Exp, Stmt};

grammar;

// Macros -----------------------------------------------------------------------------------------

ParenList<Val>: Vec<Val> = {
    "(" ")" => Vec::new(),
    "(" <p:ParenVal<Val>*> <v:Val> ")" => {
        let mut vec = p;
        vec.push(v);
        vec
    }
};

ParenVal<Val> = <Val> ",";

BinExp<Op, NextLevel>: Exp = {
    <b:BinExp<Op, NextLevel>> <o:Op> <n:NextLevel> => Exp::BinExp(Box::new(b), o, Box::new(n)),
    NextLevel,
};

// Statements -------------------------------------------------------------------------------------

pub Stmt: Stmt = {
    SingleStmt,
    If,
};

SingleStmt: Stmt = {
    r#"/\*[A-Za-z0-9 `~!@#$%^&*()_+-=\[\]\{\}:;'"<>,\.?/]*\*/"# => Stmt::Empty,
    <OrExp> "=" <Exp> ";" => Stmt::Assign(<>),
    "var" <Var> "=" <Exp> ";" => Stmt::Decl(<>),
    <BareExp> ";" => Stmt::BareExp(<>),
    "return" <Exp> ";" => Stmt::Ret(<>),
    "while" <Clause> <Block> => Stmt::While(<>),
    NamedDefun => Stmt::BareExp(<>),
    "throw" <Exp> ";" => Stmt::Throw(Box::new(<>)),
    "if" <c:Clause> <b1:Block> "else" <b2:Block> => Stmt::If(c, b1, b2),
    "try" <t:BracedBlock> <c:CatchBlock> => Stmt::Try(t, c.0, c.1, vec![]),
    "try" <t:BracedBlock> <f:FinallyBlock> => Stmt::Try(t, String::from(""), vec![], f),
    "try" <t:BracedBlock> <c:CatchBlock> <f:FinallyBlock> => Stmt::Try(t, c.0, c.1, f),
};

CatchBlock: (String, Vec<Stmt>) = "catch" "(" <Var> ")" <BracedBlock>;
FinallyBlock: Vec<Stmt> = "finally" <BracedBlock>;

If: Stmt = {
    "if" <c:Clause> <b:Block> => Stmt::If(c, b, vec![]),
    "if" <c:Clause> <b:Block> "else" <i:If> => Stmt::If(c, b, vec![i]),
};

Block: Vec<Stmt> = {
    BracedBlock,
    SingleStmt => vec![<>],
};

BracedBlock: Vec<Stmt> = "{" <Stmt+> "}";
Clause = "(" <Exp> ")";

// Expressions ------------------------------------------------------------------------------------

pub Exp = {
    NonDefun,
    Defun,
};

BareExp = {
    NonDefun,
    NamedDefun,
};

Defun = {
    AnonDefun,
    NamedDefun,
};

AnonDefun: Exp = "function" <p:Params> <b:BracedBlock> => Exp::Defun(None, p, b);
NamedDefun: Exp = "function" <v:Var> <p:Params> <b:BracedBlock> => Exp::Defun(Some(v), p, b);
Params = ParenList<Var>;

NonDefun = {
    OrExp,
    ObjLit,
};

OrExp = BinExp<OrOp, AndExp>;
OrOp: BinOp = "||" => BinOp::Or;

AndExp = BinExp<AndOp, BitOrExp>;
AndOp: BinOp = "&&" => BinOp::And;

BitOrExp = BinExp<BitOrOp, BitXorExp>;
BitOrOp: BinOp = "|" => BinOp::BitOr;

BitXorExp = BinExp<BitXorOp, BitAndExp>;
BitXorOp: BinOp = "^" => BinOp::BitXor;

BitAndExp = BinExp<BitAndOp, EqExp>;
BitAndOp: BinOp = "&" => BinOp::BitAnd;

EqExp = BinExp<EqOp, CmpExp>;
EqOp: BinOp = {
    "==" => BinOp::Eql,
    "===" => BinOp::EqlStrict,
    "!=" => BinOp::Neq,
    "!==" => BinOp::NeqStrict,
};

CmpExp = BinExp<CmpOp, ShiftExp>;
CmpOp: BinOp = {
    ">" => BinOp::Gt,
    ">=" => BinOp::Ge,
    "<" => BinOp::Lt,
    "<=" => BinOp::Le,
};

ShiftExp = BinExp<ShiftOp, AddExp>;
ShiftOp: BinOp = {
    "<<" => BinOp::ShiftLeft,
    ">>" => BinOp::ShiftRight,
    ">>>" => BinOp::ShiftRightUnsigned,
};

AddExp = BinExp<AddOp, MulExp>;

AddOp: BinOp = {
    "+" => BinOp::Plus,
    "-" => BinOp::Minus,
};

MulExp = BinExp<MulOp, TypeOf>;

MulOp: BinOp = {
    "*" => BinOp::Star,
    "/" => BinOp::Slash,
    "**" => BinOp::Exponent,
    "%" => BinOp::Mod,
};

TypeOf : Exp = {
    "typeof" <PreExp> => Exp::TypeOf(Box::new(<>)),
    PreExp,
};

PreExp: Exp = {
    "++" <PreExp> => Exp::PreInc(Box::new(<>)),
    "--" <PreExp> => Exp::PreDec(Box::new(<>)),
    PostExp,
};

PostExp: Exp = {
    <PostExp> "++" => Exp::PostInc(Box::new(<>)),
    <PostExp> "--" => Exp::PostDec(Box::new(<>)),
    SignedExp,
};

SignedExp: Exp = {
    "-" <SignedOperand> => Exp::Neg(Box::new(<>)),
    "+" <SignedOperand> => Exp::Pos(Box::new(<>)),
    SignedOperand,
};

SignedOperand = {
    Constructor,
    Call,
};

Constructor: Exp = {
    "new" <Constructor> => Exp::NewObject(Box::new(<>), Vec::new()),
    "new" <ObjLit> => Exp::NewObject(Box::new(<>), Vec::new()),
    LHSTerm,
};

Call: Exp = {
    <c:Call> <a:Args> => Exp::Call(Box::new(c), a),
    <t:LHSTerm> <a:Args> => Exp::Call(Box::new(t), a),
    <c:Call> "." <v:Var> => Exp::InstanceVar(Box::new(c), v),
};

ObjLit: Exp = "{" <ps:(<Property> ",")*> <p:Property?> "}" => {
    let v = match p {
        Some(prop) => {
            let mut ps = ps;
            ps.push(prop);
            ps
        },
        None => ps
    };

    Exp::Object(v)
};

Term: Exp = {
    LHSTerm,
    ObjLit,
};

LHSTerm: Exp = {
    Lit,
    Var => Exp::Var(<>),
    <t:Term> "[" <k:BoxExp> "]" => Exp::KeyAccessor(Box::new(t), k),
    "new" <t:Term> <a:Args> => Exp::NewObject(Box::new(t), a),
    "undefined" => Exp::Undefined,
    "null" => Exp::Null,
    "(" <Exp> ")",
    <t:Term> "." <v:Var> => Exp::InstanceVar(Box::new(t), v),
};

Lit: Exp = {
    Bool => Exp::Bool(<>),
    Float => Exp::Float(<>),
    Str => Exp::Str(<>),
    "[" <es:ParenVal<Exp>*> <e:Exp?> "]" => {
        let mut vec = es;

        if let Some(exp) = e {
            vec.push(exp);
        }

        Exp::Array(vec.into_iter().map(Box::new).collect())
    }
};

Property = {
    <Key> ":" <BoxExp>
};

Key = {
    Str,
    Var,
};

Args = ParenList<BoxExp>;
BoxExp: Box<Exp> = Exp => Box::new(<>);

Var: String = r"[$A-Za-z_][$0-9A-Za-z_]*" => String::from(<>);

// Literals ---------------------------------------------------------------------------------------

Bool: bool = {
    "true" => true,
    "false" => false,
};

Float: f64 = {
    // '2' or '2.'
    r"-?[0-9]+\.?" => f64::from_str(<>).unwrap(),
    // '.2' or '2.0'
    r"-?[0-9]*\.[0-9]+" => f64::from_str(<>).unwrap(),

    // '2' or '2.'
    r"-?[0-9]+\.?[eE][-+]?[0-9]+" => f64::from_str(<>).unwrap(),
    // '.2' or '2.0'
    r"-?[0-9]*\.[0-9]+[eE][-+]?[0-9]+" => f64::from_str(<>).unwrap(),
    "NaN" => NAN,
};

// Strings ----------------------------------------------------------------------------------------
Str = {
    SingleStr,
    DoubleStr,
};

SingleStr: String =
    r#"'(\\[0-3]?[0-7]{1,2}|[^\\']|\\[bfnrtv'"\\]|\\x[0-9a-fA-F]{2}|\\u[0-9a-fA-F]{4})*'"# => String::from(&<>[1..<>.len()-1]);

DoubleStr: String =
    r#""(\\[0-3]?[0-7]{1,2}|[^\\"]|\\[bfnrtv'"\\]|\\x[0-9a-fA-F]{2}|\\u[0-9a-fA-F]{4})*""# => String::from(&<>[1..<>.len()-1]);
