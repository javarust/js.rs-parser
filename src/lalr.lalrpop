use std::str::FromStr;
use ast::{BinOp, Exp, Stmt};

grammar;

// Statement nonterminal
pub Stmt: Stmt = {
    <Var> "=" <Exp>  ";" => Stmt::Assign(<>),
    "var" <Var> "=" <Exp> ";" => Stmt::Decl(<>),
};

// Expression nonterminal
pub Exp: Exp = {
    <e:Exp> <o:AddOp> <m:MulExp> => Exp::BinExp(Box::new(e), o, Box::new(m)),
    MulExp,
};

AddOp: BinOp = {
    "+" => BinOp::Plus,
    "-" => BinOp::Minus,
};

// Parses multiplication
MulExp: Exp = {
    <m:MulExp> <o:MulOp> <t:Term> => Exp::BinExp(Box::new(m), o, Box::new(t)),
    Term,
};

MulOp: BinOp = {
    "*" => BinOp::Star,
};

// Parses numbers and parenthetical expressions
Term: Exp = {
    Int => Exp::Int(<>),
    Float => Exp::Float(<>),
    Var => Exp::Var(<>),
    "(" <Exp> ")",
};

Int: i64 = {
    r"-?[0-9]+" => i64::from_str(<>).unwrap()
};

Float: f64 = {
    r"-?[0-9]+\.[0-9]+" => f64::from_str(<>).unwrap()
};

Var: String = {
    r"[A-Za-z_][0-9A-Za-z_]*" => <>.to_owned()
};
